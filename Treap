//                        Bismillahir Rahmanir Rahim
///ALGO: Treap
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include<bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define all(v) v.begin(), v.end()
#define FILL(a, x) memset(a, x, sizeof(a))
#define ll long long
#define Fast ios_base::sync_with_stdio(false);cin.tie(NULL);
#define INF INT_MAX
#define MX 1000010
#define mod 1000000007
#define base 31
#define inv 129032259
#define dout if(debug) cout
#define FR(i, n) for(int i=0; i<n; i++)
#define FOR(i, n) for(int i=1; i<=n; i++)
const double Pi=acos(-1);
using namespace std;
int debug=01;
 
typedef struct node * pnode;
struct node {
    ll prior, value, cnt, sum, toprop;
    bool rev;
    pnode l, r;
    node(ll value):prior(rand()), value(value), sum(value), cnt(1), toprop(1), l(NULL), r(NULL){}
};
 
 
 
 
int cnt (pnode it) {
    return it ? it->cnt : 0;
}
 
void upd_cnt (pnode it) {
    if (it) it->cnt = cnt(it->l) + cnt(it->r) + 1;
}
 
 
 
void prop (pnode it) {
    if (it && it->toprop != 1) {
        it->sum= (it->sum * it->toprop )%mod;
        it->value= (it->value * it->toprop )%mod;
        if (it->l)  it->l->toprop = (it->l->toprop *  it->toprop) %mod;
        if (it->r)  it->r->toprop = (it->r->toprop *  it->toprop) %mod;
        it->toprop = 1;
    }
}
 
 
ll sum (pnode it) {
    prop(it);
    return it ? it->sum : 0;
}
 
void upd_sum (pnode it) {
    if (it) it->sum = (sum(it->l) + sum(it->r) +it->value )%mod;
    prop(it);
}
 
 
void update(pnode it, ll val){
    if(it) it->toprop=(it->toprop * val) %mod;
    prop(it);
}
 
 
void merge (pnode & t, pnode l, pnode r) {
    prop (l);
    prop (r);
    if (!l || !r)
        t = l ? l : r;
    else if (l->prior > r->prior)
        merge (l->r, l->r, r),  t = l;
    else
        merge (r->l, l, r->l),  t = r;
    upd_cnt (t);
    upd_sum (t);
}
 
void split (pnode t, pnode & l, pnode & r, int key, int add = 0) {
    if (!t)
        return void( l = r = 0 );
    prop (t);
    int cur_key = add + cnt(t->l);
    if (key <= cur_key)
        split (t->l, l, t->l, key, add),  r = t;
    else
        split (t->r, t->r, r, key, add + 1 + cnt(t->l)),  l = t;
    upd_cnt (t);
    upd_sum (t);
}
 
void output (pnode t) {
    if (!t)  return;
    prop (t);
    output (t->l);
    cout<<t->sum<<" : "<<t->value<<" : "<<t->toprop<<" : "<<t->cnt<<"\n";
    output (t->r);
}
 
void insert(pnode & t, int value, int key){
    pnode x, y, z = new node(value);
    split(t, x, y, key);
    update(y, base);
    merge(t, x, z);
    merge(t, t, y);
}
 
void reverse (pnode t, int l, int r) {
    pnode t1, t2, t3;
    split (t, t1, t2, l);
    split (t2, t2, t3, r-l+1);
    t2->rev ^= true;
    merge (t, t1, t2);
    merge (t, t, t3);
}
 
 
void solve(){
    int n, q;
    string s;
    cin>>n>>q>>s;
    pnode t=NULL, rt=NULL;
    ll bs[n+q+10], in[n+q+10];
    bs[0]=1, in[0]=1;
    for(int i=1; i <n+q+10; i++) in[i]=(in[i-1]*inv)%mod, bs[i]=(bs[i-1]*base)%mod;
    for(int i=0; i<n; i++){
        insert(t, (s[i]*bs[i])%mod, i);
        insert(rt, (s[n-1-i]*bs[i])%mod, i);
    }
    while(q--){
        int tt;
        cin>>tt;
        if(tt==3){
            int l, r;
            cin>>l>>r;
            l--, r--;
            pnode a, b, c;
            split(t, a, t, l);
            split(t, b, c, r-l+1);
 
            int rl=n-r-1, rr=n-l-1;
            pnode ra, rb, rc;
            split(rt, ra, rt, rl);
            split(rt, rb, rc, rr-rl+1);
 
 
 
            if((sum(b)*in[l])%mod == (sum(rb)*in[rl])%mod) cout<<"yes\n";
            else cout<<"no\n";
 
 
 
            merge(t, a, b);
            merge(t, t, c);
            merge(rt, ra, rb);
            merge(rt, rt, rc);
 
        }
        else if(tt==1){
            int l, r;
            cin>>l>>r;
            l--, r--;
            pnode a, b, c;
            split(t, a, t, l);
            split(t, b, c, r-l+1);
 
            int rl=n-r-1, rr=n-l-1;
            pnode ra, rb, rc;
            split(rt, ra, rt, rl);
            split(rt, rb, rc, rr-rl+1);
 
            update(c, in[r-l+1]);
            update(rc, in[rr-rl+1]);
 
            merge(t, a, c);
            merge(rt, ra, rc);
            n-=(r-l+1);
 
        }
        else if(tt==2){
            int i;
            char x;
            cin>>x>>i;
            i--;
            insert(t, (x*bs[i])%mod, i);
            i=n-i;
            insert(rt, (x*bs[i])%mod, i);
            n++;
        }
    }
 
 
 
 
}
int main() {
    Fast
    int tst=1;
    //cin>>tst;
    for(int T=1; T<=tst; T++){
        //cout<<"Case "<<T<<": ";
        solve();
    }
}
